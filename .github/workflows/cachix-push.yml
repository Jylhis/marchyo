name: Check, build and push to Cachix
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  # Security and validation checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@main
        with:
          diagnostic-endpoint: ''
      - name: Enable Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Run flake check
        id: flake-check
        run: |
          echo "::group::Flake validation"
          nix flake check --print-build-logs
          echo "::endgroup::"
      - name: Run statix linter
        run: |
          echo "::group::Statix linting"
          nix develop --command statix check . || echo "::warning::Statix found issues"
          echo "::endgroup::"
      - name: Check for dead code
        run: |
          echo "::group::Dead code detection"
          nix develop --command deadnix . || echo "::warning::Dead code found"
          echo "::endgroup::"
      - name: Validate formatting
        run: |
          echo "::group::Format validation"
          nix fmt -- --check .
          echo "::endgroup::"
      - name: Security audit summary
        if: success()
        run: |
          echo "::notice::All security checks passed"
  # Matrix builds for all tests and configurations
  build-and-test:
    name: Build ${{ matrix.target }} (${{ matrix.system }})
    runs-on: ubuntu-latest
    needs: security-audit
    strategy:
      fail-fast: false
      matrix:
        system:
          - x86_64-linux
          # ARM builds require emulation - enable if needed
          # - aarch64-linux
        target:
          # NixOS tests
          - nixos-desktop
          - nixos-development
          - nixos-git
          - nixos-users
          # Home Manager tests
          - home-git
          - home-packages
          # Integration tests
          - integration-all-features
          - integration-module-eval
          # Exclude ARM-only targets for now
          # exclude:
          #   - system: aarch64-linux
          #     target: iso-minimal
          #   - system: aarch64-linux
          #     target: iso-graphical
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@main
        with:
          diagnostic-endpoint: ''
      - name: Enable Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: marchyo
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ github.event_name == 'pull_request' }}
      # Enable QEMU for ARM builds (if needed)
      # - name: Setup QEMU
      #   if: matrix.system == 'aarch64-linux'
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     platforms: arm64
      - name: Build ${{ matrix.target }}
        id: build
        run: |
          echo "::group::Building ${{ matrix.target }}"

          # Build with statistics tracking
          BUILD_START="$(date +%s)"

          nix build \
            --print-build-logs \
            --show-trace \
            --keep-going \
            ".#checks.${{ matrix.system }}.${{ matrix.target }}"

          BUILD_END="$(date +%s)"
          BUILD_TIME="$((BUILD_END - BUILD_START))"

          echo "build_time=$BUILD_TIME" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

          echo "::notice::Built ${{ matrix.target }} in ${BUILD_TIME}s"
      - name: Get build statistics
        id: stats
        run: |
          echo "::group::Build statistics"

          # Get derivation info
          DRV_PATH="$(nix path-info --derivation ".#checks.${{ matrix.system }}.${{ matrix.target }}")"
          OUT_PATH="$(nix path-info ".#checks.${{ matrix.system }}.${{ matrix.target }}")"

          # Calculate closure size
          CLOSURE_SIZE="$(nix path-info -S "$OUT_PATH" | awk '{print $2}')"

          {
            echo "closure_size=$CLOSURE_SIZE"
            echo "derivation=$DRV_PATH"
            echo "output=$OUT_PATH"
          } >> "$GITHUB_OUTPUT"

          echo "::notice::Closure size: $CLOSURE_SIZE bytes"
          echo "::endgroup::"
      - name: Post build summary
        if: always()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## Build Results: ${{ matrix.target }} (${{ matrix.system }})

          - **Status**: ${{ steps.build.outcome }}
          - **Build Time**: ${{ steps.build.outputs.build_time }}s
          - **Closure Size**: ${{ steps.stats.outputs.closure_size }} bytes
          - **Output Path**: \`${{ steps.stats.outputs.output }}\`

          EOF
  # Build ISO images
  build-isos:
    name: Build ISO - ${{ matrix.iso }}
    runs-on: ubuntu-latest
    needs: security-audit
    strategy:
      fail-fast: false
      matrix:
        iso:
          - iso-minimal
          - iso-graphical
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@main
        with:
          diagnostic-endpoint: ''
      - name: Enable Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: marchyo
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ github.event_name == 'pull_request' }}
      - name: Build ${{ matrix.iso }}
        id: build
        run: |
          echo "::group::Building ${{ matrix.iso }}"

          BUILD_START="$(date +%s)"

          nix build \
            --print-build-logs \
            --show-trace \
            ".#${{ matrix.iso }}"

          BUILD_END="$(date +%s)"
          BUILD_TIME=$((BUILD_END - BUILD_START))

          echo "build_time=$BUILD_TIME" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

          echo "::notice::Built ${{ matrix.iso }} in ${BUILD_TIME}s"
      - name: Get ISO statistics
        id: stats
        run: |
          echo "::group::ISO statistics"

          OUT_PATH="$(nix path-info ".#${{ matrix.iso }}")"
          ISO_PATH="${OUT_PATH}/iso"

          if [ -d "$ISO_PATH" ]; then
            ISO_FILE="$(find "$ISO_PATH" -name "*.iso" | head -1)"
            if [ -n "$ISO_FILE" ]; then
              ISO_SIZE="$(du -h "$ISO_FILE" | cut -f1)"
              echo "iso_size=$ISO_SIZE" >> "$GITHUB_OUTPUT"
              echo "iso_file=$ISO_FILE" >> "$GITHUB_OUTPUT"
              echo "::notice::ISO size: $ISO_SIZE"
            fi
          fi

          CLOSURE_SIZE="$(nix path-info -S "$OUT_PATH" | awk '{print $2}')"
          echo "closure_size=$CLOSURE_SIZE" >> "$GITHUB_OUTPUT"

          echo "::endgroup::"
      - name: Post ISO build summary
        if: always()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## ISO Build Results: ${{ matrix.iso }}

          - **Status**: ${{ steps.build.outcome }}
          - **Build Time**: ${{ steps.build.outputs.build_time }}s
          - **ISO Size**: ${{ steps.stats.outputs.iso_size }}
          - **Closure Size**: ${{ steps.stats.outputs.closure_size }} bytes

          EOF
  # Separate job for formatting check (runs in parallel with security)
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@main
        with:
          diagnostic-endpoint: ''
      - name: Enable Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Check treefmt
        run: |
          nix build ".#checks.x86_64-linux.treefmt" --print-build-logs
  # Final summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [security-audit, build-and-test, build-isos, format-check]
    if: always()
    steps:
      - name: Check build results
        run: |
          # Check if any critical jobs failed
          FAILED=0

          if [ "${{ needs.security-audit.result }}" != "success" ]; then
            echo "::error::Security audit failed"
            FAILED=1
          fi

          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "::error::Some test builds failed"
            FAILED=1
          fi

          if [ "${{ needs.build-isos.result }}" != "success" ]; then
            echo "::warning::ISO builds failed (non-critical)"
            # Don't fail on ISO builds - they're optional
          fi

          if [ "${{ needs.format-check.result }}" != "success" ]; then
            echo "::error::Format check failed"
            FAILED=1
          fi

          if [ $FAILED -eq 1 ]; then
            echo "::error::Critical checks failed"
            exit 1
          fi

          echo "::notice::All critical checks passed successfully!"
      - name: Post summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'
          # Marchyo CI/CD Summary

          All checks, builds, and security audits completed successfully.

          ## What was validated:
          - **Security audit**: statix, deadnix, flake check
          - **Code formatting**: treefmt validation
          - **NixOS tests**: desktop, development, git, users
          - **Home Manager tests**: git, packages
          - **Integration tests**: all-features, module-eval
          - **ISO images**: minimal and graphical installers

          ## Cachix
          Builds have been pushed to the `marchyo` Cachix cache and are ready for use.

          ## Usage
          To use the cached builds:
          ```bash
          cachix use marchyo
          ```

          EOF
